<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"https://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="outpolic.admin.limits.mapper.AdminLimitsMapper">
	<resultMap id="AdminLimitsTypeMap" type="outpolic.admin.limits.domain.AdminLimits">
		<id 	column="lt_cd" 				property="limitsTypeCode"/>
		<id 	column="lmt_cd" 			property="limitsCode"/>
		<result column="lt_nm" 				property="limitsTypeName"/>
		<result column="lt_expln" 			property="limitsTypeExpln"/>
		<result column="stc_cd" 			property="limitsTypeStcCode"/>
		<result column="stc_nm" 			property="limitsTypeStcName"/>
		<result column="lt_reg_adm_cd" 		property="limitsTypeRegAdmCode"/>
		<result column="lt_reg_ymdt" 		property="limitsTypeRegYmdt"/>
		<result column="lt_mdfcn_adm_cd" 	property="limitsTypeMdfcnAdmCode"/>
		<result column="lt_mdfcn_ymdt" 		property="limitsTypeMdfcnYmdt"/>
		
		<result column="mbr_cd" 			property="limitsMemberCode"/>
		<result column="dt_cd" 				property="DeclarationTypeCode"/>
		<result column="dt_nm" 				property="DeclarationTypeName"/>
		<result column="dr_cd" 				property="DeclarationReasonCode"/> 
		<result column="dr_nm" 				property="DeclarationReasonName"/>
		<result column="lmt_start_ymdt" 	property="limitsStartYmdt"/>
		<result column="lmt_end_ymdt" 		property="limitsEndYmdt"/>
		<result column="lmt_clear_ymdt" 	property="limitsClearYmdt"/>
		<result column="lmt_rmd_days" 		property="limitsRmdDays"/>
		<result column="lmt_status" 		property="limitsStatus"/>
		
		<result column="lp_cd" 				property="limitsPeriodCode"/>
		<result column="lp_nm" 				property="limitsPeriodName"/>
		<result column="lp_days" 			property="limitsPeriodDays"/>
		<result column="lp_mdfcn_adm_cd" 	property="limitsPeriodMdfcnAdmCode"/>
		<result column="lp_mdfcn_ymdt" 		property="limitsPeriodMdfcnYmdt"/>
		<result column="lp_reg_adm_cd" 		property="limitsPeriodRegAdmCode"/>
		<result column="lp_reg_ymdt" 		property="limitsPeriodRegYmdt"/>
		
		<result column="lr_cd" 				property="limitsReasonCode"/>
		<result column="lr_cnd" 			property="limitsReasonCnd"/>
		<result column="lr_cnd_min" 		property="limitsReasonCndMin"/>
		<result column="lr_cnd_max" 		property="limitsReasonCndMax"/>
		<result column="lr_expln" 			property="limitsReasonExpln"/>
		<result column="lr_reg_adm_cd" 		property="limitsReasonRegAdmCode"/>
		<result column="lr_reg_ymdt" 		property="limitsReasonRegYmdt"/>
		<result column="lr_mdfcn_adm_cd" 	property="limitsReasonMdfcnAdmCode"/>
		<result column="lr_mdfcn_ymdt" 		property="limitsReasonMdfcnYmdt"/>
	</resultMap>
	
	<resultMap id="AdminLimitsAuthorityMap" type="outpolic.admin.limits.domain.AdminLimits">
		<id 	column="mbr_cd" 					property="authorityMemberCode"/>
		<result column="grd_cd" 					property="authorityGrdCode"/>
		<result column="stc_cd" 					property="authorityStcCode"/>
		<result column="stc_nm" 					property="authorityStcName"/>
		<result column="ma_portfolio" 				property="authorityPortfolio"/>
		<result column="ma_outsourcing_write" 		property="authorityOsWrite"/>
		<result column="ma_outsourcing_contract" 	property="authorityOsContract"/>
		<result column="ma_outsourcing" 			property="authorityOs"/>
		<result column="ma_chat" 					property="authorityChat"/>
		<result column="ma_review" 					property="authorityReview"/>
		<result column="ma_mdfcn_ymdt" 				property="authorityMdfcnYmdt"/>
	</resultMap>
	
	<resultMap id="limitsReasonMap" type="outpolic.admin.limits.domain.AdminLimitsReason">
		<id     column="lr_cd"              property="limitsReasonCode"/>
		<result column="dt_cd"              property="declarationTypeCode"/>
		<result column="dr_cd"              property="declarationReasonCode"/>
		<result column="lp_cd"              property="limitsPeriodCode"/>
		<result column="lr_cnd"             property="limitsReasonCnd"/>
		<result column="lr_cnd_min"         property="limitsReasonCndMin"/>
		<result column="lr_cnd_max"         property="limitsReasonCndMax"/>
		<result column="lr_expln"           property="limitsReasonExpln"/>
		<result column="lr_reg_adm_cd"      property="limitsReasonRegAdmCode"/>
		<result column="lr_reg_ymdt"        property="limitsReasonRegYmdt"/>
		<result column="lr_mdfcn_adm_cd"    property="limitsReasonMdfcnAdmCode"/>
		<result column="lr_mdfcn_ymdt"      property="limitsReasonMdfcnYmdt"/>
	</resultMap>	
	
	<resultMap id="declarationFullInfoMap" type="outpolic.admin.limits.domain.AdminDeclarationFullInfo">
		<result column="dt_cd"              property="declarationTypeCode"/>
		<result column="dr_cd"              property="declarationReasonCode"/>
		<result column="mbr_cd"             property="declarationMemberCode"/>
		<result column="decl_target_cd"     property="declarationTargetCode"/>
	</resultMap>
	
	<update id="updateMemberAuthority" parameterType="outpolic.admin.limits.domain.AdminLimits">
	/*회원 권한 업데이트*/
    UPDATE member_authority
    SET
        ma_portfolio = #{authorityPortfolio},
        ma_outsourcing_write = #{authorityOsWrite},
        ma_outsourcing_contract = #{authorityOsContract},
        ma_outsourcing = #{authorityOs},
        ma_chat = #{authorityChat},
        ma_review = #{authorityReview},
        ma_mdfcn_ymdt = #{authorityMdfcnYmdt}
    WHERE
        mbr_cd = #{authorityMemberCode}
	</update>

	<select id="selectMemberAuthorityByMemberCode" parameterType="string" resultMap="AdminLimitsAuthorityMap">
		select
			ma.mbr_cd as mbr_cd,
			m.grd_cd as grd_cd,
			ma.ma_portfolio as ma_portfolio,
			ma.ma_outsourcing_write as ma_outsourcing_write,
			ma.ma_outsourcing_contract as ma_outsourcing_contract,
			ma.ma_outsourcing as ma_outsourcing,
			ma.ma_chat as ma_chat,
			ma.ma_review as ma_review,
			ma.ma_mdfcn_ymdt as ma_mdfcn_ymdt
		from
			member_authority ma 
			left join member m on ma.mbr_cd = m.mbr_cd
		where
			ma.mbr_cd = #{memberCode}
	</select>
	
	<insert id="insertLimitsType" parameterType="outpolic.admin.limits.domain.AdminLimits">
		/* 제재 타입 등록 */
		INSERT INTO limits_type (
			lt_cd, lt_nm, lt_expln, stc_cd, lt_reg_adm_cd, lt_reg_ymdt
		) VALUES (
			#{limitsTypeCode}, #{limitsTypeName}, #{limitsTypeExpln}, #{limitsTypeStcCode}, #{limitsTypeRegAdmCode}, NOW()
		)
	</insert>

	<update id="updateLimitsType" parameterType="outpolic.admin.limits.domain.AdminLimits">
		/* 제재 타입 수정 */
		UPDATE limits_type
		SET
			lt_nm = #{limitsTypeName},
			lt_expln = #{limitsTypeExpln},
			stc_cd = #{limitsTypeStcCode},
			lt_mdfcn_adm_cd = #{limitsTypeMdfcnAdmCode},
			lt_mdfcn_ymdt = NOW()
		WHERE
			lt.lt_cd = #{limitsTypeCode}
	</update>

	<select id="selectLimitsTypeById" parameterType="string" resultMap="AdminLimitsTypeMap">
		/* 특정 제재 타입 조회 (수정 모달용) */
		SELECT
			lt.lt_cd as lt_cd,
			lt.lt_nm as lt_nm,
			lt.lt_expln as lt_expln,
			lt.stc_cd as stc_cd,
			sc.stc_nm as stc_nm,
			lt.lt_reg_adm_cd as lt_reg_adm_cd,
			lt.lt_reg_ymdt as lt_reg_ymdt,
			lt.lt_mdfcn_adm_cd as lt_mdfcn_adm_cd,
			lt.lt_mdfcn_ymdt as lt_mdfcn_ymdt
		FROM
			limits_type lt
			LEFT JOIN status_code sc ON lt.stc_cd = sc.stc_cd
		WHERE
			lt.lt_cd = #{limitsTypeCode}
	</select>
	
	<select id="getAdminLimitsAuthorityList" resultMap="AdminLimitsAuthorityMap">
		/* 회원 권한 조회 */
		select
			ma.mbr_cd as mbr_cd,
			m.grd_cd as grd_cd,
			m.stc_cd as stc_cd,
			sc.stc_nm as stc_nm,
			ma.ma_portfolio as ma_portfolio,
			ma.ma_outsourcing_write as ma_outsourcing_write,
			ma.ma_outsourcing_contract as ma_outsourcing_contract,
			ma.ma_outsourcing as ma_outsourcing,
			ma.ma_chat as ma_chat,
			ma.ma_review as ma_review,
			ma.ma_mdfcn_ymdt as ma_mdfcn_ymdt
		from
			member_authority ma 
			left join member m on ma.mbr_cd = m.mbr_cd
			left join status_code sc on m.stc_cd = sc.stc_cd
		order by
			m.mbr_join_ymdt;
	</select>
	
	<select id="selectAdminLimitAuthority" resultMap="AdminLimitsAuthorityMap">
		/*회원 권한 검색 and 등급별 필터링*/
		select * from member_authority ma inner join member m
		on ma.mbr_cd = m.mbr_cd
		inner join status_code sc on m.stc_cd = sc.stc_cd
		<where>
			<if test="keyword != null and keyword != ''">
				ma.mbr_cd LIKE CONCAT('%', #{keyword},'%')
			</if>
			<if test="levelValue != null and levelValue != '' and levelValue != 'all'">
				and m.grd_cd = #{levelValue}
			</if>
		</where>
	</select>
	
	
	<select id="getAdminLimitsList" resultMap="AdminLimitsTypeMap">
		/* 제재 내역 조회 */
		select
		    l.lmt_cd as lmt_cd,
		    l.mbr_cd as mbr_cd,
		    dr.dt_cd as dt_cd,
		    dt.dt_nm as dt_nm,
		    l.dr_cd as dr_cd,
		    dr.dr_nm as dr_nm,
		    l.lmt_start_ymdt as lmt_start_ymdt,
		    l.lmt_end_ymdt as lmt_end_ymdt,
		    l.lmt_clear_ymdt as lmt_clear_ymdt,
		    l.lmt_rmd_days as lmt_rmd_days,
		    case 
		        when l.lmt_rmd_days = 0 then '제재종료'
		        else '제재중'
		    end as lmt_status
		from
		    limits l
		    left join declaration_reason dr on l.dr_cd = dr.dr_cd
		    left join declaration_type dt on dt.dt_cd = dr.dt_cd
		order by
		    l.lmt_start_ymdt;
	</select>
	
	<select id="selectAdminLimitsList" resultMap="AdminLimitsTypeMap">
		/*제재 회원 검색*/
		select
		    l.lmt_cd as lmt_cd,
		    l.mbr_cd as mbr_cd,
		    dr.dt_cd as dt_cd,
		    dt.dt_nm as dt_nm,
		    l.dr_cd as dr_cd,
		    dr.dr_nm as dr_nm,
		    l.lmt_start_ymdt as lmt_start_ymdt,
		    l.lmt_end_ymdt as lmt_end_ymdt,
		    l.lmt_clear_ymdt as lmt_clear_ymdt,
		    l.lmt_rmd_days as lmt_rmd_days,
		    case 
		        when l.lmt_rmd_days = 0 then '제재종료'
		        else '제재중'
		    end as lmt_status
		from
		    limits l
		    left join declaration_reason dr on l.dr_cd = dr.dr_cd
		    left join declaration_type dt on dt.dt_cd = dr.dt_cd
		<where>
			<if test="searchType != null and keyword != null and keyword != ''">
			<choose>
				<when test="searchType == 'limitsMemberCode'">
					l.mbr_cd LIKE CONCAT('%', #{keyword}, '%')
				</when>			
				<when test="searchType == 'DeclarationTypeName'">
					dt.dt_nm LIKE CONCAT('%', #{keyword}, '%')
				</when>			
				<when test="searchType == 'DeclarationReasonName'">
					dr.dr_nm LIKE CONCAT('%', #{keyword}, '%')
				</when>			
			</choose>
			</if>
			<if test="selectDateType != null and selectDateType == 'start'">
				<if test="startDate != null and startDate != ''">
					AND l.lmt_start_ymdt &gt;= #{startDate}
				</if>
				<if test="endDate != null and endDate != ''">
					AND l.lmt_start_ymdt &lt;= #{endDate}
				</if>
			</if>
			<if test="selectDateType != null and selectDateType == 'end'">
				<if test="startDate != null and startDate != ''">
					AND l.lmt_end_ymdt &gt;= #{startDate}
				</if>
				<if test="endDate != null and endDate != ''">
					AND l.lmt_end_ymdt &lt;= #{endDate}
				</if>
			</if>
				<choose>
					<when test="levelSearch == '제재중'">
						AND l.lmt_rmd_days != 0
					</when>
					<when test="levelSearch == '제재종료'">
						AND l.lmt_rmd_days = 0
					</when>
				</choose>
		</where>    
		order by
		    l.lmt_start_ymdt;
	</select>
	
	
	<select id="getAdminLimitsReasonList" resultMap="AdminLimitsTypeMap">
		/* 제재 사유 내역 조회 */
		select
			lr.lr_cd as lr_cd,
			lr.dt_cd as dt_cd,
			dt.dt_nm as dt_nm,
			lr.dr_cd as dr_cd,
			dr.dr_nm as dr_nm,
			lr.lt_cd as lt_cd,
			lt.lt_nm as lt_nm,
			lr.lp_cd as lp_cd,
			lp.lp_nm as lp_nm,
			lr.lr_cnd as lr_cnd,
			lr.lr_cnd_min as lr_cnd_min,
			lr.lr_cnd_max as lr_cnd_max,
			lr.lr_expln as lr_expln,
			lr.stc_cd as stc_cd,
			sc.stc_nm as stc_nm,
			lr.lr_reg_adm_cd as lr_reg_adm_cd,
			lr.lr_reg_ymdt as lr_reg_ymdt,
			lr.lr_mdfcn_adm_cd as lr_mdfcn_adm_cd,
			lr.lr_mdfcn_ymdt as lr_mdfcn_ymdt
		from
			limits_reason lr
			left join declaration_type dt on lr.dt_cd = dt.dt_cd
			left join declaration_reason dr on lr.dr_cd = dr.dr_cd
			left join limits_type lt on lr.lt_cd = lt.lt_cd
			left join limits_period lp on lr.lp_cd = lp.lp_cd
			left join status_code sc on lr.stc_cd = sc.stc_cd
		order by
			lr.lr_reg_ymdt;
	</select>
	
	<select id="getAdminLimitsPeriodList" resultMap="AdminLimitsTypeMap">
		/* 제재 기간 내역 조회 */
		select
			lp.lp_cd as lp_cd,
			lp.lp_nm as lp_nm,
			lp.lp_days as lp_days,
			lp.stc_cd as stc_cd,
			sc.stc_nm as stc_nm,
			lp.lp_mdfcn_adm_cd as lp_mdfcn_adm_cd,
			lp.lp_mdfcn_ymdt as lp_mdfcn_ymdt,
			lp.lp_reg_adm_cd as lp_reg_adm_cd,
			lp.lp_reg_ymdt as lp_reg_ymdt
		from
			limits_period lp
			left join status_code sc on lp.stc_cd = sc.stc_cd
		order by
			lp.lp_reg_ymdt;
	</select>
	
	<select id="getAdminLimitsTypeList" resultMap="AdminLimitsTypeMap">
		/* 제재 타입 내역 조회 */
		select
			lt.lt_cd as lt_cd, 
			lt.lt_nm as lt_nm,
			lt.lt_expln as lt_expln,
			lt.stc_cd as stc_cd,
			sc.stc_nm as stc_nm,
			lt.lt_reg_adm_cd as lt_reg_adm_cd,
			lt.lt_reg_ymdt as lt_reg_ymdt,
			lt.lt_mdfcn_adm_cd as lt_mdfcn_adm_cd,
			lt.lt_mdfcn_ymdt as lt_mdfcn_ymdt
		from
			limits_type lt
			left join status_code sc on lt.stc_cd = sc.stc_cd
		order by
			lt.lt_reg_ymdt;
	</select>
	
	
	<insert id="insertLimitsPeriod" parameterType="outpolic.admin.limits.domain.AdminLimits">
		/* 제재 기간 등록 */
		INSERT INTO limits_period (
			lp_cd, lp_nm, lp_days, stc_cd, lp_reg_adm_cd, lp_reg_ymdt
		) VALUES (
			#{limitsPeriodCode}, #{limitsPeriodName}, #{limitsPeriodDays}, #{limitsTypeStcCode}, #{limitsPeriodRegAdmCode}, NOW()
		)
	</insert>

	<update id="updateLimitsPeriod" parameterType="outpolic.admin.limits.domain.AdminLimits">
		/* 제재 기간 수정 */
		UPDATE limits_period
		SET
			lp_nm = #{limitsPeriodName},
			lp_days = #{limitsPeriodDays},
			stc_cd = #{limitsTypeStcCode},
			lp_mdfcn_adm_cd = #{limitsPeriodMdfcnAdmCode},
			lp_mdfcn_ymdt = NOW()
		WHERE
			lp_cd = #{limitsPeriodCode}
	</update>

	<select id="selectLimitsPeriodById" parameterType="string" resultMap="AdminLimitsTypeMap">
		/* 특정 제재 기간 조회 (수정 모달용) */
		SELECT
			lp.lp_cd as lp_cd,
			lp.lp_nm as lp_nm,
			lp.lp_days as lp_days,
			lp.stc_cd as stc_cd,
			sc.stc_nm as stc_nm,
			lp.lp_reg_adm_cd as lp_reg_adm_cd,
			lp.lp_reg_ymdt as lp_reg_ymdt,
			lp.lp_mdfcn_adm_cd as lp_mdfcn_adm_cd,
			lp.lp_mdfcn_ymdt as lp_mdfcn_ymdt
		FROM
			limits_period lp
			LEFT JOIN status_code sc ON lp.stc_cd = sc.stc_cd
		WHERE
			lp.lp_cd = #{limitsPeriodCode}
	</select>
	
	<insert id="insertLimitsReason" parameterType="outpolic.admin.limits.domain.AdminLimits">
		/* 제재 사유 등록 */
		<selectKey keyColumn="newCode" keyProperty="limitsReasonCode" resultType="String" order="BEFORE">
			/* 자동 코드 생성 */
			SELECT
				CASE
				WHEN COUNT(*) = 0 THEN 'LR_C1'
				ELSE
				CONCAT('LR_C', MAX(CAST(SUBSTRING_INDEX(lr.lr_cd, 'LR_C', -1) AS UNSIGNED)) + 1)
				END AS newCode
			FROM
			limits_reason lr ;
		</selectKey>
	    INSERT INTO limits_reason (
	        dt_cd, dr_cd, lt_cd, lp_cd, lr_cnd, lr_cnd_min, lr_cnd_max, lr_expln, stc_cd, lr_reg_adm_cd, lr_reg_ymdt
	    ) VALUES (
	        #{declarationTypeCode}, #{declarationReasonCode}, #{limitsTypeCode}, #{limitsPeriodCode},
	        #{limitsReasonCnd}, #{limitsReasonCndMin}, #{limitsReasonCndMax}, #{limitsReasonExpln}, #{limitsTypeStcCode},
	        #{limitsReasonRegAdmCode}, NOW()
	    )
	</insert>
	
	<update id="updateLimitsReason" parameterType="outpolic.admin.limits.domain.AdminLimits">
		/* 제재 사유 수정 */
		UPDATE limits_reason
		SET
			dt_cd = #{declarationTypeCode},
			dr_cd = #{declarationReasonCode},
			lt_cd = #{limitsTypeCode},
			lp_cd = #{limitsPeriodCode},
			lr_cnd = #{limitsReasonCnd},
			lr_cnd_min = #{limitsReasonCndMin},
			lr_cnd_max = #{limitsReasonCndMax},
			lr_expln = #{limitsReasonExpln},
			stc_cd = #{limitsTypeStcCode},
			lr_mdfcn_adm_cd = #{limitsReasonMdfcnAdmCode},
			lr_mdfcn_ymdt = NOW()
		WHERE
			lr_cd = #{limitsReasonCode}
	</update>

	<select id="selectLimitsReasonById" parameterType="string" resultMap="AdminLimitsTypeMap">
		/* 특정 제재 사유 조회 (수정 모달용) */
		SELECT
			lr.lr_cd as lr_cd,
			lr.dt_cd as dt_cd,
			dt.dt_nm as dt_nm,
			lr.dr_cd as dr_cd,
			dr.dr_nm as dr_nm,
			lr.lt_cd as lt_cd,
			lt.lt_nm as lt_nm,
			lr.lp_cd as lp_cd,
			lp.lp_nm as lp_nm,
			lp.lp_days as lp_days,
			lr.lr_cnd as lr_cnd,
			lr.lr_cnd_min as lr_cnd_min,
			lr.lr_cnd_max as lr_cnd_max,
			lr.lr_expln as lr_expln,
			lr.stc_cd as stc_cd,
			sc.stc_nm as stc_nm,
			lr.lr_reg_adm_cd as lr_reg_adm_cd,
			lr.lr_reg_ymdt as lr_reg_ymdt,
			lr.lr_mdfcn_adm_cd as lr_mdfcn_adm_cd,
			lr.lr_mdfcn_ymdt as lr_mdfcn_ymdt
		FROM
			limits_reason lr
			LEFT JOIN declaration_type dt ON lr.dt_cd = dt.dt_cd
			LEFT JOIN declaration_reason dr ON lr.dr_cd = dr.dr_cd
			LEFT JOIN limits_type lt ON lr.lt_cd = lt.lt_cd
			LEFT JOIN limits_period lp ON lr.lp_cd = lp.lp_cd
			LEFT JOIN status_code sc ON lr.stc_cd = sc.stc_cd
		WHERE
			lr.lr_cd = #{limitsReasonCode}
	</select>

	<select id="getDeclarationTypeList" resultMap="AdminLimitsTypeMap">
		SELECT
			dt_cd,
			dt_nm
		FROM
			declaration_type
		ORDER BY
			dt_cd;
	</select>

	<select id="getDeclarationReasonList" resultMap="AdminLimitsTypeMap">
		SELECT
			dr_cd,
			dr_nm
		FROM
			declaration_reason
		<where>
			<if test="dt_cd != null and dt_cd != ''">
				dt_cd = #{dt_cd}
			</if>
		</where>
		ORDER BY
			dr_cd;
	</select>
	
	<select id="getDeclarationInfo" parameterType="string" resultMap="declarationFullInfoMap">
	    SELECT
	        decl_cd,
	        dt_cd,
	        dr_cd,
	        mbr_cd,
	        decl_target_cd
	    FROM
	        declaration
	    WHERE
	        decl_cd = #{declCd}
	</select>
	
	<select id="getCumulativeCount" resultType="int">
	    SELECT
	        lrc_cnt
	    FROM
	        limits_reason_cumulative
	    WHERE
	        mbr_cd = #{mbrCd} AND dr_cd = #{drCd}
	</select>
	
	<select id="getMatchedLimitsReason" resultMap="limitsReasonMap">
	    SELECT
	        lr_cd,
	        dt_cd,
	        dr_cd,
	        lp_cd,
	        lr_cnd,
	        lr_cnd_min,
	        lr_cnd_max,
	        lr_expln
	    FROM
	        limits_reason
	    WHERE
	        dt_cd = #{dtCd} AND dr_cd = #{drCd}
	        AND (
	            (lr_cnd = 'COUNT' AND lr_cnd_min <![CDATA[ <= ]]> #{cnt} AND lr_cnd_max <![CDATA[ >= ]]> #{cnt})
	            OR lr_cnd IS NULL OR lr_cnd = ''
	        )
	    ORDER BY
	        lr_cnd_min DESC
	    LIMIT 1
	</select>
	
	<select id="getEndDateByPeriod" resultType="java.sql.Timestamp">
	    SELECT
	        DATE_ADD(#{start}, INTERVAL lp_days DAY)
	    FROM
	        limits_period
	    WHERE
	        lp_cd = #{lpCd}
	</select>
	
	<insert id="insertLimits" parameterType="outpolic.admin.limits.domain.AdminLimits">
	    INSERT INTO limits (
	        lmt_cd, mbr_cd, dt_cd, dr_cd, lr_cd, lmt_start_ymdt, lmt_end_ymdt, lmt_clear_ymdt, lmt_rmd_days, lmt_status, lmt_reg_adm_cd, lmt_reg_ymdt
	    ) VALUES (
	        #{limitsCode}, #{limitsMemberCode}, #{declarationTypeCode}, #{declarationReasonCode}, #{limitsReasonCode}, #{limitsStartYmdt}, #{limitsEndYmdt}, #{limitsClearYmdt}, #{limitsRmdDays}, 'LMS001', #{limitsTypeRegAdmCode}, NOW()
	    )
	</insert>
	
	<insert id="insertCumulative">
	    INSERT INTO limits_reason_cumulative (
	        mbr_cd, dr_cd, lrc_cnt
	    ) VALUES (
	        #{mbrCd}, #{drCd}, #{cnt}
	    )
	</insert>
	
	<update id="updateCumulative">
	    UPDATE limits_reason_cumulative
	    SET
	        lrc_cnt = #{cnt}
	    WHERE
	        mbr_cd = #{mbrCd} AND dr_cd = #{drCd}
	</update>
</mapper>