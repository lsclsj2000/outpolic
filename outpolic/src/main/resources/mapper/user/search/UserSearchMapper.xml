<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="outpolic.user.search.mapper.UserSearchMapper">
 	<resultMap type="outpolic.user.search.domain.UserContents" id="contentResultMap">
	    <id column="content_id"         	property="contentsId"/>
	    <result column="content_type"   	property="contentsType"/>
	    <result column="content_title"  	property="contentsTitle"/>
	    <result column="registrant_name" 	property="enterName"/>
	    <result column="registration_date" 	property="registrationDate"/>
	    <result column="cl_cd"          	property="clCd"/>
	    <!-- [추가] 외주 상세 정보 매핑 -->
	    <result column="category_name"  	property="ctgryName"/>
	    <result column="os_amt"         	property="osAmt"/>
	    <result column="avg_review_score" 	property="reviewScore"/>
	</resultMap>
	<!-- [최종 수정] getContentsList 쿼리 -->
	<select id="getContentsList" resultMap="contentResultMap">
	    WITH UnifiedContents AS (
	    -- 포트폴리오(PO) 데이터 조회
	    SELECT
	        p.prtf_cd            AS content_id,
	        'Portfolio'          AS content_type,
	        p.prtf_ttl           AS content_title,
	        e.ent_nm             AS registrant_name,
	        p.prtf_reg_ymdt 	 AS registration_date,
	        cl.cl_cd,
	        -- ▼▼▼ 핵심 수정 1: 외주 쿼리와 컬럼 구조를 맞추기 위한 더미(dummy) 컬럼 ▼▼▼
	        c.ctgry_nm           AS category_name, -- 포트폴리오도 카테고리가 있다면 JOIN
	        NULL                 AS os_amt,
	        0.0                  AS avg_review_score
	    FROM
	        content_list cl
	    JOIN
	        portfolio p ON cl.cntd_cd = p.prtf_cd
	    JOIN
	        enterprise e ON p.ent_cd = e.ent_cd
	    LEFT JOIN -- 포트폴리오도 카테고리가 있다면 JOIN을 유지하고, 없다면 이 2줄은 삭제하고 c.ctgry_nm 대신 NULL을 사용
	        category_mapping cm on cl.cl_cd = cm.cl_cd
	    LEFT JOIN 
	        category c on cm.ctgry_id = c.ctgry_id
	    WHERE
	        cl.cl_cd LIKE 'LIST_PO_%'
	        AND p.stc_cd = 'SD_ACTIVE'
	    GROUP BY
    		p.prtf_cd, p.prtf_ttl, e.ent_nm, p.prtf_reg_ymdt, cl.cl_cd
	
	    UNION ALL
	
	    -- 외주(OS) 데이터 조회
	    -- ▼▼▼ 핵심 수정 2: 랭킹 쿼리의 로직을 그대로 이식 ▼▼▼
	    SELECT
	        o.os_cd              AS content_id,
	        'Outsourcing'        AS content_type,
	        o.os_ttl             AS content_title,
	        e.ent_nm             AS registrant_name,
	        o.os_reg_ymdt   	 AS registration_date,
	        cl.cl_cd,
	        c.ctgry_nm           AS category_name,
	        o.os_amt,
	        IFNULL(AVG(r2.rvw_evl), 0) AS avg_review_score
	    FROM
	        content_list cl
	    JOIN
	        outsourcing o ON cl.cntd_cd = o.os_cd
	    JOIN
	        enterprise e ON o.ent_cd = e.ent_cd
	    -- 랭킹 쿼리에서 가져온 JOIN 구문들
	    JOIN
	        category c ON o.ctgry_id = c.ctgry_id
	    LEFT JOIN
		    outsourcing_contract_details ocd ON cl.cl_cd = ocd.cl_cd
		LEFT JOIN
			outsourcing_prograss op on op.ocd_cd = ocd.ocd_cd 
		LEFT JOIN 
		    outsourcing_contract oc ON op.osp_cd = oc.osp_cd
		LEFT JOIN
		    review r2 ON oc.osc_id = r2.osc_id
	    WHERE
	        cl.cl_cd LIKE 'LIST_OS_%'
	        AND o.stc_cd = 'SD_ACTIVE'
	    GROUP BY
	        o.os_cd, o.os_ttl, e.ent_nm, o.os_reg_ymdt, cl.cl_cd, c.ctgry_nm, o.os_amt
	    )
	    -- 최종 검색 및 정렬
	    SELECT
	        * -- UnifiedContents의 모든 컬럼을 그대로 선택
	    FROM
	        UnifiedContents
	    WHERE
	        content_title LIKE CONCAT('%', #{keyword}, '%')
	    ORDER BY
	        registration_date DESC
	</select>

	<!-- 1. 상세 정보 DTO(ContentsDetailDTO)를 위한 resultMap -->
	<resultMap type="outpolic.user.search.domain.UserContentsDetailDTO" id="contentsDetailResultMap">
	    <!-- 공통 정보 -->
	    <id     column="content_id"         property="contentsId"/>
	    <result column="content_type"       property="contentsType"/>
	    <result column="content_title"      property="contentsTitle"/>
	    <result column="registrant_name"    property="enterName"/>
	    <result column="registrant_code"    property="enterCode"/>
	    <result column="registration_date"  property="registrationDate"/>
	    <result column="thumbnail_url"		property="thumbnailUrl"  	/>
	    
	    <!-- 상세 정보 -->
	    <result column="content_body"       property="contentsBody"/>
	    <result column="price"              property="price"/>
	    <result column="cl_cd" 				property="clCd"/>
	    <result column="prtf_period_start" 	property="participationStartDate"/>
	    <result column="prtf_period_end" 	property="participationEndDate"/>
	    <result column="prtf_client" 		property="client"/>
	    <result column="prtf_industry" 		property="industry"/>
	    <result column="isBookmarked"       property="isBookmarked"/>
	    <result column="osStrtYmdt"       	property="osStrtYmdt"/>
	    <result column="osEndYmdt"       	property="osEndYmdt"/>
	    <result column="osFlfmtCnt"       	property="osFlfmtCnt"/>
	    <result column="files_json"  		property="filesJson"/>
	</resultMap>
	<sql id="modalBookmarkJoinSql">
    	LEFT JOIN bookmark bm ON cl.cl_cd = bm.cl_cd AND bm.mbr_cd = #{userId}
	</sql>
	<sql id="modalIsBookmarkedSelectSql">
	    , CASE WHEN bm.bm_cd IS NOT NULL THEN 1 ELSE 0 END AS isBookmarked
	</sql>
	
	
	<!-- 2. ID로 특정 콘텐츠의 상세 정보를 조회하는 select 쿼리 -->
	<select id="getContentsDetailById" parameterType="string" resultMap="contentsDetailResultMap">
	    -- ID가 'PO'로 시작하면 포트폴리오 테이블에서 조회
	    SELECT
	        p.prtf_cd               AS content_id,
	        'Portfolio'             AS content_type,
	        p.prtf_ttl              AS content_title,
	        e.ent_nm                AS registrant_name,
	        e.ent_cd                AS registrant_code,
	        p.prtf_reg_ymdt         AS registration_date,
	        p.prtf_cn               AS content_body,
	        0                       AS price,
	        cl.cl_cd,
	        p.prtf_period_start,
	        p.prtf_period_end,
	        p.prtf_client,
	        p.prtf_industry,
	        p.prtf_thumbnail_url    AS thumbnail_url
	        <include refid="modalIsBookmarkedSelectSql"/>,
	        NULL                    AS osStrtYmdt,
	        NULL                    AS osEndYmdt,
	        NULL                    AS osFlfmtCnt,
	        IFNULL((SELECT CONCAT('[', GROUP_CONCAT(
	            JSON_OBJECT(
	                'fileCd', f.file_cd, 'fileOrgnlNm', f.file_orgnl_nm, 'filePath', CONCAT(f.file_path, f.file_srvr_nm)
	            )
	        ), ']') FROM file f WHERE f.cl_cd = CONCAT('LIST_', p.prtf_cd)), '[]') AS files_json
	    FROM
	        portfolio p
	    LEFT JOIN
	        enterprise e ON p.ent_cd = e.ent_cd
	    LEFT JOIN 
	        content_list cl ON p.prtf_cd = cl.cntd_cd
	    <include refid="modalBookmarkJoinSql"/>
	    WHERE
	        p.prtf_cd = #{contentsId} AND #{contentsId} LIKE 'PO_%'
	
	    UNION ALL
	
	    -- ID가 'OS'로 시작하면 외주 테이블에서 조회
	    SELECT
	        o.os_cd                 AS content_id,
	        'Outsourcing'           AS content_type,
	        o.os_ttl                AS content_title,
	        e.ent_nm                AS registrant_name,
	        e.ent_cd                AS registrant_code,
	        o.os_reg_ymdt           AS registration_date,
	        o.os_expln              AS content_body, -- 1. 순서 변경: content_body를 먼저
	        o.os_amt                AS price,        -- 2. 순서 변경: price를 다음으로
	        cl.cl_cd,
	        NULL                    AS prtf_period_start,
	        NULL                    AS prtf_period_end,
	        NULL                    AS prtf_client,
	        NULL                    AS prtf_industry,
	        o.os_thumbnail_url      AS thumbnail_url
	        <include refid="modalIsBookmarkedSelectSql"/>, -- 3. 순서 변경: isBookmarked를 다음으로
	        o.os_strt_ymdt          AS osStrtYmdt,
	        o.os_end_ymdt           AS osEndYmdt,
	        o.os_flfmt_cnt          AS osFlfmtCnt,
	        IFNULL((SELECT CONCAT('[', GROUP_CONCAT(
	            JSON_OBJECT(
	                'fileCd', f.file_cd, 'fileOrgnlNm', f.file_orgnl_nm, 'filePath', CONCAT(f.file_path, f.file_srvr_nm)
	            )
	        ), ']') FROM file f WHERE f.cl_cd = CONCAT('LIST_', o.os_cd)), '[]') AS files_json
	    FROM
	        outsourcing o
	    LEFT JOIN
	        enterprise e ON o.ent_cd = e.ent_cd
	    LEFT JOIN 
	        content_list cl ON o.os_cd = cl.cntd_cd
	    <include refid="modalBookmarkJoinSql"/>
	    WHERE
	        o.os_cd = #{contentsId} AND #{contentsId} LIKE 'OS_%'
	</select>
	
	<resultMap type="outpolic.user.search.domain.UserContentItemDTO" id="outsourcingContentItemMap">
        <id     column="os_cd"         property="contentsId"/>
        <result column="os_ttl"        property="contentsTitle"/>
        <result column="ent_nm"        property="enterName"/>
        <result column="os_reg_ymdt"   property="registrationDate"/>
        <result column="os_amt"        property="price"/>
        <result column="cl_cd"        property="clCode"/>
    </resultMap>

    <!-- [핵심] 카테고리 ID로 외주(Outsourcing) 콘텐츠 목록을 조회하는 쿼리 -->
	<select id="findContentsByCategoryId" parameterType="string" resultMap="outsourcingContentItemMap">
	    SELECT
	        o.os_cd,
	        o.os_ttl,
	        o.os_reg_ymdt,
	        o.os_amt,
	        e.ent_nm,
	        cl.cl_cd,
	        CASE WHEN bm.bm_cd IS NOT NULL THEN 1 ELSE 0 END AS isBookmarked
	    FROM
	        outsourcing o
	    LEFT JOIN
	        enterprise e ON o.ent_cd = e.ent_cd
	    LEFT JOIN
	    	content_list cl on o.os_cd = cl.cntd_cd
	    LEFT JOIN 
	    	bookmark bm ON cl.cl_cd = bm.cl_cd AND bm.mbr_cd = #{userId}
	    WHERE
	        o.ctgry_id LIKE CONCAT(#{categoryId}, '%')
	    	AND o.stc_cd = 'SD_ACTIVE'
	    ORDER BY
	        o.os_reg_ymdt DESC
	</select>
	
 </mapper>